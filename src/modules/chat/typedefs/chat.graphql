type Query {
  getMessage: [Message]
  getChannels: [Channel]
  getCurrentUserChannels(id: ID!): [Channel]
  getChannel(id: ID!): Channel
  message(id: ID!): Message
}

type Mutation {
  createMessage(createChatInput: CreateChatInput): Message #Created new message
  createChannel(usersId: [Int]): Channel
}

type Subscription {
  messageAdded(channelId: ID!): Message
  subscribeChannel(id: ID!): Channel
  subscribeUser(id: ID!): SubUser
}

type SubUser {
  channel: Channel,
  message: Message,
  type: String
}

type Message {
  id: Int
  channel: Channel
  text: String
  user: User
  creationDate: String
}

type Channel {
  id: Int
  messages: [Message]
  name: String
  users: [User]
}

input CreateChatInput {
  text: String
  id: ID
  channelId: ID
  creationDate: String
}
